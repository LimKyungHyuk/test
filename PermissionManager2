package net.khlim.permission;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.widget.Toast;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

import static android.R.attr.permission;

public class PermissionManager {

    private static final boolean IS_DEV = true;

    private Activity context;
    public static final int DANGEROUS_PERMISSIONS_REQUEST = 1;
    public static final int NORMAL_PERMISSIONS_REQUEST = 2;

    // 필수조건
    private String[] dangerousPermissions;
    private ArrayList<String> filtratedPermissions;

    // 선택조건
    private Map<String, PmsEntry> normalPermissionsAndNotices;
    private Queue<PmsEntry> filtratedNormalPermissions;


    private String dangerousNotice;

    public PermissionManager(Activity context){
        this.context = context;
    }

    public PermissionManager setDangerousPermissions(String... permissions){
        this.dangerousPermissions = permissions;

        return this;
    }

    public void setDangerousNotice(String msg){
        this.dangerousNotice = new String(msg);
    }

    public PermissionManager putNormalPermissionAndNotice(String permission, String notice){

        if(null == permission) return null; // 퍼미션이 맞는지 예외 처리 필요
        if(null == notice) return null;

        if(null == normalPermissionsAndNotices){
            normalPermissionsAndNotices = new HashMap<String, PmsEntry>();
        }

        // 중복 제거filtratedNormalPermissions
        normalPermissionsAndNotices.put(permission, new PmsEntry(permission, notice));

        return this;
    }

    public void run(){
        //checkDangerousPermissions();
        checkNormalPermission();
    }

    private void checkDangerousPermissions(){

        filtratedPermissions = new ArrayList<String>();

        int result = -1;
        for(String permission : dangerousPermissions){
            if(ContextCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED){
                filtratedPermissions.add(permission);
            }
        }

        log("filtratedPermissions:" + filtratedPermissions);
        if(null != filtratedPermissions){

            // 필수 권한 중 사용자가 한번이라도 거부한 경험이 있는지 체크
            for(String permission : filtratedPermissions){
                log("shouldShowRequest : :" + ActivityCompat.shouldShowRequestPermissionRationale(context, permission));
                if(ActivityCompat.shouldShowRequestPermissionRationale(context, permission)){

                    // 고지
                    log("notice!");
                    AlertDialog.Builder alert_confirm = new AlertDialog.Builder(context);
                    alert_confirm.setMessage(dangerousNotice).setCancelable(false).setNegativeButton("취소",
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    ActivityCompat.finishAffinity(context);
                                }
                            }).setPositiveButton("권한설정",
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {

                                    Intent intent = new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS, Uri.parse("package:" + context.getPackageName()));
                                    intent.addCategory(Intent.CATEGORY_DEFAULT);
                                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                                    context.startActivity(intent);
                                    ActivityCompat.finishAffinity(context);
                                }
                            });

                    AlertDialog alert = alert_confirm.create();
                    alert.show();
                    return;
                }


                // 권한 요청
                log("requestPermissions1:" + filtratedPermissions);
                log("requestPermissions2:" + filtratedPermissions.toArray(new String[0]));

                ActivityCompat.requestPermissions(context, filtratedPermissions.toArray(new String[0]),
                        DANGEROUS_PERMISSIONS_REQUEST);
            }
        }
        // App 정상 실행
    }

    // 1. 선택 권한은 개별적으로 받아야 한다.

    private void checkNormalPermission(){

        filtratedNormalPermissions = new LinkedList<PmsEntry>();

        for(String permission : normalPermissionsAndNotices.keySet()){
            if(ContextCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED){
                filtratedNormalPermissions.offer(normalPermissionsAndNotices.get(permission));
            }
        }

        requestPermissions();
    }

    private void requestPermissions(){
        log("filtratedOptionalPermissions:" + filtratedNormalPermissions);

        if(null != filtratedNormalPermissions && !filtratedNormalPermissions.isEmpty()) {

            PmsEntry entry =  filtratedNormalPermissions.poll();
            Toast.makeText(context, entry.getNotice(), Toast.LENGTH_SHORT).show();
            ActivityCompat.requestPermissions(context, new String[]{entry.getPermission()}, NORMAL_PERMISSIONS_REQUEST);
        }
    }



    public void setResult(int requestCode, String permissions[], int[] grantResults){
        switch (requestCode) {
            case DANGEROUS_PERMISSIONS_REQUEST:

                if(IS_DEV)
                    for(int i = 0 ; i < grantResults.length ; i++){
                        log("Result" + "[" +i + "]: "+ permissions[i] + " - " + grantResults[i]);
                    }

                if ((grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED)
                        && (grantResults.length > 0 && grantResults[1] == PackageManager.PERMISSION_GRANTED)) {
                    log("[DANGEROUS_PERMISSIONS_REQUEST] 권한허가");
                } else {
                    log("[DANGEROUS_PERMISSIONS_REQUEST] 권한거부");
                    ActivityCompat.finishAffinity(context);
                }

                break;

            case NORMAL_PERMISSIONS_REQUEST:


                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED){
                    log("[NORMAL_PERMISSIONS_REQUEST] 권한허가");
                } else {
                    log("[NORMAL_PERMISSIONS_REQUEST] 권한거부");

                }

                requestPermissions();
                break;
        }
    }

    public void msg(String msg){
        if(IS_DEV) Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();
    }

    public void log(String msg){
        if(IS_DEV) Log.d("PERMISSION", "[PERMISSION] " + msg);
    }
}
